# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L2d3AtFc1YHF3VpXwkKXL9DbEftRHGf1
"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize

# Function to fetch stock data
def get_stock_data(tickers, start_date, end_date):
    """
    Fetch historical stock data for given tickers.

    :param tickers: List of stock ticker symbols
    :param start_date: Start date for historical data
    :param end_date: End date for historical data
    :return: DataFrame with stock prices
    """
    data = yf.download(tickers, start=start_date, end=end_date)['Adj Close']
    return data

# Function to calculate daily returns
def calculate_returns(data):
    """
    Calculate daily returns for given stock prices.

    :param data: DataFrame with stock prices
    :return: DataFrame with daily returns
    """
    return data.pct_change().dropna()

# Function to calculate annualized returns and volatility
def calculate_metrics(returns):
    """
    Calculate annualized returns and volatility.

    :param returns: DataFrame with daily returns
    :return: DataFrame with annualized returns and volatility
    """
    annual_returns = returns.mean() * 252
    annual_volatility = returns.std() * np.sqrt(252)
    return pd.DataFrame({'Returns': annual_returns, 'Volatility': annual_volatility})

# Function to calculate Sharpe Ratio
def calculate_sharpe_ratio(returns, risk_free_rate=0.02):
    """
    Calculate Sharpe Ratio for given returns.

    :param returns: DataFrame with daily returns
    :param risk_free_rate: Annual risk-free rate (default: 2%)
    :return: Series with Sharpe Ratios
    """
    metrics = calculate_metrics(returns)
    return (metrics['Returns'] - risk_free_rate) / metrics['Volatility']

# Function to perform portfolio optimization
def optimize_portfolio(returns):
    """
    Perform portfolio optimization to maximize Sharpe Ratio.

    :param returns: DataFrame with daily returns
    :return: Tuple with optimal weights and maximum Sharpe Ratio
    """
    num_assets = len(returns.columns)
    args = (returns, )
    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
    bounds = tuple((0, 1) for asset in range(num_assets))

    result = minimize(neg_sharpe_ratio, num_assets*[1./num_assets], args=args,
                      method='SLSQP', bounds=bounds, constraints=constraints)

    return result['x'], -result['fun']

# Helper function for portfolio optimization
def neg_sharpe_ratio(weights, returns):
    """
    Calculate negative Sharpe Ratio for given weights and returns.
    Used in the optimization process.

    :param weights: Array of asset weights
    :param returns: DataFrame with daily returns
    :return: Negative Sharpe Ratio
    """
    portfolio_return = np.sum(returns.mean() * weights) * 252
    portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(returns.cov() * 252, weights)))
    sharpe_ratio = (portfolio_return - 0.02) / portfolio_volatility
    return -sharpe_ratio

# Main function to run the analysis
def main():
    # Define stock tickers and date range
    tickers = ['AAPL', 'KO', 'MSFT', 'AMZN','META','GOOG']
    start_date = '2020-01-01'
    end_date = '2023-12-31'

    # Fetch stock data
    data = get_stock_data(tickers, start_date, end_date)

    # Calculate returns
    returns = calculate_returns(data)

    # Calculate metrics
    metrics = calculate_metrics(returns)
    print("Annualized Returns and Volatility:")
    print(metrics)

    # Calculate Sharpe Ratio
    sharpe_ratios = calculate_sharpe_ratio(returns)
    print("\nSharpe Ratios:")
    print(sharpe_ratios)

    # Optimize portfolio
    optimal_weights, max_sharpe_ratio = optimize_portfolio(returns)
    print("\nOptimal Portfolio Weights:")
    for ticker, weight in zip(tickers, optimal_weights):
        print(f"{ticker}: {weight:.4f}")
    print(f"\nMaximum Sharpe Ratio: {max_sharpe_ratio:.4f}")

    # Visualize results
    plt.figure(figsize=(12, 6))
    plt.scatter(metrics['Volatility'], metrics['Returns'], c=sharpe_ratios, cmap='viridis')
    plt.colorbar(label='Sharpe Ratio')
    plt.xlabel('Annualized Volatility')
    plt.ylabel('Annualized Returns')
    plt.title('Risk-Return Trade-off with Sharpe Ratio')
    for i, ticker in enumerate(tickers):
        plt.annotate(ticker, (metrics['Volatility'][i], metrics['Returns'][i]))
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    main()

